name: CI

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_COMMIT_ID: "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"
  push:
    branches:
      - master
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - "res/**"
      - "appimage/**"
      - "flatpak/**"

jobs:
  build:
    name: x86_64-unknown-linux-gnu (Ubuntu 20.04)
    runs-on: ubuntu-20.04
    steps:
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Install prerequisites
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get install -y \
           clang \
           cmake \
           curl \
           gcc \
           git \
           g++ \
           libpam0g-dev \
           libasound2-dev \
           libgstreamer1.0-dev \
           libgstreamer-plugins-base1.0-dev \
           libgtk-3-dev \
           libpulse-dev \
           libxcb-randr0-dev \
           libxcb-shape0-dev \
           libxcb-xfixes0-dev \
           libxdo-dev \
           libxfixes-dev \
           nasm \
           wget

    - name: Setup vcpkg with Github Actions binary cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: /opt/artifacts/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        $VCPKG_ROOT/vcpkg install --x-install-root="$VCPKG_ROOT/installed"
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-gnu
        components: ''

    - name: Show version information (Rust, cargo, GCC)
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - uses: Swatinem/rust-cache@v2

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --locked --target=x86_64-unknown-linux-gnu

    - name: clean
      shell: bash
      run: |
        cargo clean

    - name: Set testing options
      id: test-options
      shell: bash
      run: |
        # test only library unit tests and binary for arm-type targets
        unset CARGO_TEST_OPTIONS

        # test only library unit tests and binary for x86_64-unknown-linux-gnu target
        CARGO_TEST_OPTIONS="--lib --bin ${PROJECT_NAME}"

        #deprecated echo ::set-output name=CARGOTEST_OPTIONS::${CARGO_TEST_OPTIONS}
        echo "::set-output name=CARGOTEST_OPTIONS::${CARGO_TEST_OPTIONS}"

    - name: Test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ steps.test-options.outputs.CARGOTEST_OPTIONS }}

    - name: Archive binary
      shell: bash
      run: |
        mkdir -p target/release/
        mv ./target/x86_64-unknown-linux-gnu/release/${PROJECT_NAME} ./target/release/

    - name: Archive Rust artifacts
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        profile: release
        args: |
          archive -n "artifacts/${GITHUB_SHA}.tar.gz" -o - --workspace .
        packages: |
          git
          git-crypt
          git-lfs
          ${PROJECT_NAME}
        path: target/release/
        release: |
          gh release create ${{ github.event.repository.tag.name }} ${{ steps.archive.outputs.archive }}
          gh release upload ${{ github.event.repository.tag.name }} ./target/release/${PROJECT_NAME}
